plugins {
  id 'cpp-library'
  id 'xcode'
  id 'visual-studio'
}

allprojects {
  group = 'org.eclipse.fx.drift'
//  version = '1.0.0.' + getGitHash()
  version = Versioning.fullVersion
}


import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.nativeplatform.platform.OperatingSystem
import org.gradle.internal.jvm.Jvm

def getJNIPlatformDir() {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    'win32'
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
    'darwin'
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    'linux'
  }
}

def getJNIIncludeDir() {
	Jvm.current().javaHome.toPath().resolve('include')
}
def getJNIPlatformIncludeDir() {
	getJNIIncludeDir().resolve(getJNIPlatformDir())
}

def addJNIIncludes(compileTask) {
  def includeDir = Jvm.current().javaHome.toPath().resolve('include')
  def platformIncludeDir = includeDir.resolve(getJNIPlatformDir())
  compileTask.includes(includeDir)
  compileTask.includes(platformIncludeDir)
}

def configureSourceTree(cppTree) {

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    println("windows")
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
     println("mac")
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
     println("linux")
  }
}

def createCppTree(proj) {
  def tree = proj.fileTree('src')
  if (Os.isFamily(Os.FAMILY_WINDOWS)) { 
    tree.exclude '**/macos'
    tree.exclude '**/linux'
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
    tree.exclude '**/win32'
    tree.exclude '**/linux'
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    tree.exclude '**/win32'
    tree.exclude '**/macos'
  }  
  return tree
}

def configureToolchain(toolChain) {
  if (toolChain in [VisualCpp]) {
    println("configuring visual studio")
  }
  if (toolChain in [Gcc]) {
    println("configuring gcc")
  }
}

def configureLinker(targetMachine, linkTask) {
  if (targetMachine.operatingSystemFamily.windows) {
    linkTask.linkerArgs.add("opengl32.lib")
    linkTask.linkerArgs.add("d3d9.lib")
    linkTask.linkerArgs.add("user32.lib")
    linkTask.linkerArgs.add("gdi32.lib")
  } else if (targetMachine.operatingSystemFamily.linux) {
    linkTask.linkerArgs.add('-lX11')
  } else if (targetMachine.operatingSystemFamily.macOs) {
    linkTask.linkerArgs.addAll('-framework', 'OpenGL')
    linkTask.linkerArgs.addAll('-framework', 'Cocoa')
    linkTask.linkerArgs.addAll('-framework', 'IOSurface')
    linkTask.linkerArgs.addAll('-framework', 'CoreFoundation')
    
  }
}

tasks.withType(CppCompile).configureEach {
    // Define a compiler options
    //compilerArgs.add '-W3'

    compilerArgs.add '-std=c++11'

    // Define toolchain-specific compiler options
    compilerArgs.addAll toolChain.map { toolChain ->
        if (toolChain in [ Gcc, Clang ]) {
            return ['-std=c++11']
        } else if (toolChain in VisualCpp) {
            return []
        }
        return []
    }
}

  
