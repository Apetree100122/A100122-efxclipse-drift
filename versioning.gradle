/* ******************************************************************************
 * Copyright (c) 2019, 2020 BestSolution.at and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License 2.0 
 * which is available at http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     Christoph Caks <ccaks@bestsolution.at> - initial API and implementation
 * ******************************************************************************/

def getGitHash() {
  if (System.getenv("CI")) {
    System.getenv("GITHUB_SHA")
  } else {
    getLocalGitHash()
  }
}

def getGitTimestamp() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--date=iso-strict', '--format=%cd', 'HEAD'
        standardOutput = stdout
    }
    return java.time.OffsetDateTime.parse(stdout.toString().trim()).toInstant()    
}

def getLocalShortGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getLocalGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getReleaseTag() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        ignoreExitValue true
        standardOutput = stdout
    }
    def tag = stdout.toString().trim()
    if (tag.matches('v[0-9]+\\.[0-9]+\\.[0-9]+(\\.[a-z0-9]+)?')) {
        return tag
    }
    return null
}

def getVersion() {
    def tag = getReleaseTag()
    if (tag != null) {
        return tag.substring(1)
    } else {
        return '999.0.0'
    }
    
}

def getTimestamp() {
    System.getenv('BUILD_TIMESTAMP') != null ? System.getenv('BUILD_TIMESTAMP') : toTimestamp(getGitTimestamp())
}

def getQualifier() {
    if (getReleaseTag() == null)
        "${getTimestamp()}-${getLocalShortGitHash()}"
    else
        null
}

def toTimestamp(instant) {
    return java.time.format.DateTimeFormatter.ofPattern("yyyyMMdd-HHmmss").withZone( ZoneId.of("UTC") ).format(instant)
}

def tmpReleaseTag = getReleaseTag()
def tmpReleaseMode = tmpReleaseTag != null
def tmpIsRelease = tmpReleaseTag != null && tmpReleaseTag.matches('v[0-9]+\\.[0-9]+\\.[0-9]+')
def tmpIsPreRelease = tmpReleaseTag != null && tmpReleaseTag.matches('v[0-9]+\\.[0-9]+\\.[0-9]+\\.[a-z0-9]+')
def tmpVersion = getVersion()
def tmpTimestamp = getTimestamp()
def tmpQualifier = getQualifier()
def tmpFullVersion = tmpReleaseMode ? tmpVersion : "$tmpVersion-$tmpQualifier"
def tmpBundleVersion = tmpReleaseMode ? tmpVersion : "${tmpVersion}.$tmpQualifier"

ext {
    Versioning = [
        releaseTag: tmpReleaseTag,
        releaseMode: tmpReleaseMode,
	isRelease: tmpIsRelease,
	isPreRelease: tmpIsPreRelease,
        version: tmpVersion,
        timestamp: tmpTimestamp,
        qualifier: tmpQualifier,
        fullVersion: tmpFullVersion,
        bundleVersion: tmpBundleVersion,
        gitSHA: getGitHash()
    ]
}


task showVersioning {
    println "Versioning: " //${new groovy.json.JsonBuilder(Versioning).toPrettyString()}"
    println "\tgitSHA: $Versioning.gitSHA"
    println "\treleaseMode: $Versioning.releaseMode"
    println "\tisRelease: $Versioning.isRelease"
    println "\tisPreRelease: $Versioning.isPreRelease"
    println "\treleaseTag: $Versioning.releaseTag"
    println "\tversion: $Versioning.version"
    println "\ttimestamp: $Versioning.timestamp"
    println "\tqualifier: $Versioning.qualifier"
    println "\tfullVersion: $Versioning.fullVersion"
    println "\tbundleVersion: $Versioning.bundleVersion"
    doLast {
    }
}
